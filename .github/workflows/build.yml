name: Build

on:
  push:
    branches:
    - main

  pull_request:
    branches:
    - main

  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        os: [macos-13, ubuntu-22.04, windows-2022]
        include:
          - os: macos-13
            out-dir-suffix: macos
          - os: ubuntu-22.04
            out-dir-suffix: ubuntu-x86_64
          - os: ubuntu-22.04-arm
            out-dir-suffix: ubuntu-arm64
          - os: windows-2022
            out-dir-suffix: windows

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v3
    - name: Install libgl
      if: matrix.os == 'ubuntu-22.04'
      run: |
        sudo apt update
        sudo apt install libgl-dev libxext-dev

    - name: Setup MultiToolTask
      if: matrix.os == 'windows-2022'
      run: |
        Add-Content "$env:GITHUB_ENV" 'UseMultiToolTask=true'
        Add-Content "$env:GITHUB_ENV" 'EnforceProcessCountAcrossBuilds=true'

    - name: Set MACOSX_DEPLOYMENT_TARGET
      if: runner.os == 'macOS'
      run: |
        echo 'MACOSX_DEPLOYMENT_TARGET=13.0' >> $GITHUB_ENV

    - name: Configure
      shell: bash
      run: |
        cmake -Bbuild -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_STANDARD=11
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          bash -c "sed 's/abs(a.x/fabs(a.x/g' -i build/_deps/luajit-imgui-src/cimnodes_r/ImNodes/ImNodes.cpp"
          bash -c "sed 's/abs(a.y/fabs(a.y/g' -i build/_deps/luajit-imgui-src/cimnodes_r/ImNodes/ImNodes.cpp"
        fi

    - name: Build
      run: cmake --build build --verbose --config Release

    - name: Install
      run: cmake --install build --config Release --prefix build/install

    - uses: actions/upload-artifact@v4
      with:
        name: mfx-base-app-${{ matrix.out-dir-suffix }}
        path: ${{ github.workspace }}/build/install/

  publish-nightly:
    name: Publish Nightly
    runs-on: ubuntu-22.04
    needs: [ build ]
    steps:
      - name: Delete old release assets
        uses: mknejp/delete-release-assets@v1
        with:
          token: ${{ github.token }}
          tag: Nightly # This may also be of the form 'refs/tags/staging'
          assets: '*'
          fail-if-no-assets: false
      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v4
      - name: Check
        shell: bash
        run: |
          tar -C mfx-base-app-macos -czf mfx-base-app-macos.tar.gz .
          tar -C mfx-base-app-ubuntu-x86_64 -czf mfx-base-app-ubuntu-x86_64.tar.gz .
          tar -C mfx-base-app-ubuntu-arm64 -czf mfx-base-app-ubuntu-arm64.tar.gz .
          tar -C mfx-base-app-windows -czf mfx-base-app-windows.tar.gz .
      - name: Upload release assets
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: '*.tar.gz'
          tag: Nightly
          overwrite: true
          file_glob: true